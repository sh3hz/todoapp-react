{"version":3,"sources":["component/TodoApp/TodoApp.js","component/About/About.js","component/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["TodoApp","state","input","items","handleChange","event","setState","target","value","storeItems","preventDefault","deleteItem","key","filter","data","index","this","className","onSubmit","type","onChange","placeholder","map","onClick","Component","About","href","Header","to","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","App","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2363620b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./TodoApp.css\";\n\nclass TodoApp extends Component {\n  state = {\n    input: \"\",\n    items: [],\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      input: event.target.value,\n    });\n  };\n\n  storeItems = (event) => {\n    event.preventDefault();\n    const { input } = this.state;\n\n    this.setState({\n      items: [...this.state.items, input],\n      input: \"\",\n    });\n  };\n\n  deleteItem = (key) => {\n    this.setState({\n      items: this.state.items.filter((data, index) => index !== key),\n    });\n  };\n  render() {\n    const { input, items } = this.state;\n    return (\n      <div className=\"todo-container\">\n        <form className=\"input-section\" onSubmit={this.storeItems}>\n          <h1>TodoApp</h1>\n          <input\n            type=\"text\"\n            value={input}\n            onChange={this.handleChange}\n            placeholder=\"   Enter here . . .\"\n          />\n        </form>\n        <ul>\n          {items.map((data, index) => (\n            <li key={index}>\n              {data}\n              <i\n                className=\"fas fa-trash-alt\"\n                onClick={() => this.deleteItem(index)}\n              ></i>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\nexport default TodoApp;\n","import React from 'react'\nimport \"./About.css\"\n\nexport default function About() {\n    return (\n        <div>\n            <h2>For more <a href=\"https://sh3hz.github.io\">GitHub</a></h2>\n        </div>\n    )\n}\n","import React from 'react';\nimport \"./Header.css\";\nimport { link, Link } from \"react-router-dom\";\n\nexport default function Header() {\n    return (\n        <header>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/About\">About</Link>\n            \n\n            \n        </header>\n    )\n}\n","import React from \"react\";\nimport TodoApp from \"./component/TodoApp/TodoApp\";\nimport About from \"./component/About/About\";\nimport Header from \"./component/Header/Header\";\nimport {BrowserRouter as Router, Route } from \"react-router-dom\";\nexport default () => {\n  return (\n   \n\n      <Router>\n          <Header />\n          <Route path=\"/\" exact component={TodoApp} />\n          <Route path=\"/about\" component={About} />\n\n      </Router>\n\n   \n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}